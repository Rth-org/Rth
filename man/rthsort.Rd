% Generated by roxygen2 (4.0.2): do not edit by hand
\name{rthsort}
\alias{rthsort}
\title{Parallel Sort}
\usage{
rthsort(x, decreasing = FALSE, inplace = FALSE, nthreads = rth.nthreads())
}
\arguments{
\item{x}{a numeric vector}

\item{decreasing}{logical; determines if the sort is ascending
(\code{decreasing=FALSE}) or descending (\code{decreasing=TRUE}).}

\item{inplace}{If TRUE, \code{x} is sorted in-place, no new R vectory
created.}

\item{nthreads}{An optional argument for specifying the number of threads
(in the case of OpenMP or TBB backends) that the routine should (at most)
use.  Does nothing with a CUDA backend.  See \link{nthreads}.}
}
\value{
If \code{decreasing=FALSE}, then the input vector is returned in
ascending order.  Otherwise, the input vector is returned in descending
order.

If \code{inplace} is TRUE, there is no return value.
}
\description{
Sorts a numeric vector into ascending or descending order.
}
\details{
The implementation uses \code{thrust::sort}, which does not necessarily
preserve the order of tied values.
}
\examples{
\dontrun{
x <- runif(10)
x
rthsort(x)  # outputs sorted x
x  # but x itself is unchanged
rthsort(x,inplace=TRUE)  # outputs nothing
x  # but x is now a sorted version of itself
}
}
\references{
\url{https://docs.thrust.googlecode.com/hg/group__sorting.html}
}

